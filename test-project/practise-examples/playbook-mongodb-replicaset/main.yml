---
  - name: host file update - Local DNS setup across all the servers
    hosts: all
    gather_facts: yes
    tasks:

    - name: Update the /etc/hosts file with node name
      tags: etchostsupdate
      become: yes
      become_user: root
      lineinfile:
        path: "/etc/hosts"
        regexp: ".*\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
        line: "{{ hostvars[item]['ansible_env'].SSH_CONNECTION.split(' ')[2] }}\t{{ hostvars[item]['ansible_hostname']}}\t{{ hostvars[item]['ansible_hostname']}}"
        state: present
        backup: yes
      register: etchostsupdate
      when: ansible_hostname != "{{ item }}" or ansible_hostname == "{{ item }}"
      with_items: "{{groups['all']}}"

    - name: copy file to remote hosts
      copy:
        src: mongodb-org-4.4.repo
        dest: /etc/yum.repos.d/mongodb-org-4.4.repo

    - name: install the latest version of mongodb
      yum:
        name: mongodb-org
        state: latest

    - name: Create a directory if it does not exist
      file:
        path: /opt/mongo
        state: directory
      ignore_errors: yes

    - name: openssl
      shell: openssl rand -base64 756 > /opt/mongo/mongo.key
      when: ansible_host == "192.168.24.2"

    - name: Copy File to standby Machine
      shell: sshpass -p 'root' scp  /opt/mongo/mongo.key root@192.168.24.3:/opt/mongo
      when: ansible_host == "192.168.24.2"

    - name: Copy File to arbiter Machine
      shell: sshpass -p 'root' scp  /opt/mongo/mongo.key root@192.168.24.4:/opt/mongo
      when: ansible_host == "192.168.24.2"

    - name: Change file ownership, group and permissions
      file:
        path: /opt/mongo/mongo.key
        owner: mongod
        group: mongod
        mode: '0400'

    - name: Start and enable service mongod
      service:
        name: mongod
        state: started
        enabled: yes

    - name: copy createUsers script
      template: src=create-user-password.j2 dest=/tmp/createUsers.js

    - name: create users
      shell: mongo  < /tmp/createUsers.js
      ignore_errors: yes

    - name: Copy mongod.conf file to remote host
      template:  
        src: mongod.conf
        dest: /etc/mongod.conf
        backup: yes
      become: yes

    - name: Restart service mongod
      service: 
        name: mongod
        state: restarted

    - name: replication process in mongo-primary
      template: src=replicaset-process-primary-1.j2 dest=/tmp/replicaset-process-1.js
      when: ansible_host == "192.168.24.2"

    - name: replication process in mongo-primary
      template: src=replicaset-process-primary-2.j2 dest=/tmp/replicaset-process-2.js
      when: ansible_host == "192.168.24.2"

    - name: replication process in mongo-primary
      template: src=replicaset-process-primary-3.j2 dest=/tmp/replicaset-process-3.js
      when: ansible_host == "192.168.24.2"

    - name: replication process in mongo-primary
      template: src=replicaset-process-primary-4.j2 dest=/tmp/replicaset-process-4.js
      when: ansible_host == "192.168.24.2"

    - name: replication process in mongo-primary
      template: src=replicaset-process-primary-5.j2 dest=/tmp/replicaset-process-5.js
      when: ansible_host == "192.168.24.2"

    - name: replication process in mongo-primary
      template: src=replicaset-process-primary-6.j2 dest=/tmp/replicaset-process-6.js
      when: ansible_host == "192.168.24.2"

    - name: replication process in mongo-primary
      template: src=replicaset-process-primary-7.j2 dest=/tmp/replicaset-process-7.js
      when: ansible_host == "192.168.24.2"

    - name: replication process in mongo-primary
      template: src=replicaset-process-primary-8.j2 dest=/tmp/replicaset-process-8.js
      when: ansible_host == "192.168.24.2"

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-1.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.2"
    - pause:
        seconds: 5

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-2.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.2"
    - pause:
        seconds: 5
      
    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-3.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.2"
    - pause:
        seconds: 5

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-4.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.2"
    - pause:
        seconds: 5

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-5.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.2"
    - pause:
        seconds: 5

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-6.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.2"
    - pause:
        seconds: 5

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-7.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.2"
    - pause:
        seconds: 5

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-8.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.2"
    - pause:
        seconds: 5

    - name: replication process in mongo-arbitery
      template: src=replicaset-process-standby-1.j2 dest=/tmp/replicaset-process-1.js
      when: ansible_host == "192.168.24.3"
      
    - name: replication process in mongo-arbitery
      template: src=replicaset-process-standby-2.j2 dest=/tmp/replicaset-process-2.js
      when: ansible_host == "192.168.24.3"
      
    - name: replication process in mongo-arbitery
      template: src=replicaset-process-standby-3.j2 dest=/tmp/replicaset-process-3.js
      when: ansible_host == "192.168.24.3"      

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-1.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.3"
    - pause:
        seconds: 5   

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-2.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.3"
    - pause:
        seconds: 5   

    - name: input commands in mongo
      shell: mongo -u replica -p replica --authenticationDatabase admin  < /tmp/replicaset-process-3.js
      ignore_errors: yes
      when: ansible_host == "192.168.24.3"
    - pause:
        seconds: 5   




  

    
    